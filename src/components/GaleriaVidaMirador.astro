---
import { Image } from 'astro:assets';

// Import all images from galeria-mirador
import image1698 from '../assets/images/galeria-mirador/DSC01698.jpeg';
import image1666 from '../assets/images/galeria-mirador/DSC01666.jpeg';
import image1503 from '../assets/images/galeria-mirador/DSC01503.jpeg';
import image1270 from '../assets/images/galeria-mirador/DSC01270.jpeg';
import image1263 from '../assets/images/galeria-mirador/DSC01263.jpeg';
import image1255 from '../assets/images/galeria-mirador/DSC01255.jpeg';
import image1252 from '../assets/images/galeria-mirador/DSC01252.jpeg';
import image1250 from '../assets/images/galeria-mirador/DSC01250.jpeg';
import image1021 from '../assets/images/galeria-mirador/DSC01021.jpeg';
import image649 from '../assets/images/galeria-mirador/DSC00649.jpeg';
import image316 from '../assets/images/galeria-mirador/DSC00316.jpeg';
import image247 from '../assets/images/galeria-mirador/DSC00247.jpeg';
import image216 from '../assets/images/galeria-mirador/DSC00216.jpeg';
import imageHospedaje1 from '../assets/images/galeria-mirador/hospedaje-mirador-rio-santo-domingo.jpeg';
import imageHospedaje2 from '../assets/images/galeria-mirador/hospedaje-mirador-rio-santo-domingo-2.jpeg';

// Define images array with imported images
const images = [
  { src: image1698, alt: 'Mirador del Rio Santo Domingo' },
  { src: image1666, alt: 'Mirador del Rio Santo Domingo' },
  { src: image1503, alt: 'Mirador del Rio Santo Domingo' },
  { src: image1270, alt: 'Mirador del Rio Santo Domingo' },
  { src: image1263, alt: 'Mirador del Rio Santo Domingo' },
  { src: image1255, alt: 'Mirador del Rio Santo Domingo' },
  { src: image1252, alt: 'Mirador del Rio Santo Domingo' },
  { src: image1250, alt: 'Mirador del Rio Santo Domingo' },
  { src: image1021, alt: 'Mirador del Rio Santo Domingo' },
  { src: image649, alt: 'Mirador del Rio Santo Domingo' },
  { src: image316, alt: 'Mirador del Rio Santo Domingo' },
  { src: image247, alt: 'Mirador del Rio Santo Domingo' },
  { src: image216, alt: 'Mirador del Rio Santo Domingo' },
  { src: imageHospedaje1, alt: 'Mirador del Rio Santo Domingo' },
  { src: imageHospedaje2, alt: 'Mirador del Rio Santo Domingo' }
];

// Create a serialized version of the images array for client-side JavaScript
const serializedImages = images.map(img => ({
  src: img.src.src,
  alt: img.alt
}));
---

<div class="py-12">
  <div class="text-center mb-8">
    <h3 class="text-4xl lg:text-7xl font-headings">La vida en el fin del af√°n</h3>
  </div>

  <!-- Scrolling Gallery -->
  <div class="relative overflow-hidden w-full">
    <div class="scrolling-gallery flex gap-4">
      {images.map((image, index) => (
        <div class="flex-shrink-0 w-[200px] md:w-[300px] aspect-square overflow-hidden rounded-lg cursor-pointer group relative" data-index={index}>
          <Image 
            src={image.src} 
            alt={image.alt}
            width={300}
            height={300}
            class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
          />
          <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-300"></div>
        </div>
      ))}
      {/* Duplicate images for seamless scrolling */}
      {images.map((image, index) => (
        <div class="flex-shrink-0 w-[200px] md:w-[300px] aspect-square overflow-hidden rounded-lg cursor-pointer group relative" data-index={index}>
          <Image 
            src={image.src} 
            alt={image.alt}
            width={300}
            height={300}
            class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
          />
          <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-300"></div>
        </div>
      ))}
    </div>
  </div>

  <!-- Full Screen Modal -->
  <div id="gallery-modal" class="fixed inset-0 bg-black bg-opacity-90 hidden z-50">
    <div class="absolute top-4 right-4 z-50">
      <button id="close-modal" class="text-white text-4xl hover:text-gray-300">&times;</button>
    </div>
    <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-full h-full flex items-center justify-center p-4">
      <button id="prev-image" class="absolute left-4 text-white text-4xl hover:text-gray-300">&lt;</button>
      <div id="modal-image-container" class="relative w-full h-full max-w-5xl max-h-[90vh] flex items-center justify-center">
        <img 
          id="modal-image"
          src={images[0].src.src}
          alt={images[0].alt}
          class="max-w-full max-h-full w-auto h-auto object-contain"
        />
      </div>
      <button id="next-image" class="absolute right-4 text-white text-4xl hover:text-gray-300">&gt;</button>
    </div>
  </div>
</div>

<style>
  .scrolling-gallery {
    animation: scroll 40s linear infinite;
  }

  .scrolling-gallery:hover {
    animation-play-state: paused;
  }

  @keyframes scroll {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-50%);
    }
  }
</style>

<script define:vars={{ serializedImages: serializedImages }}>
  const modal = document.getElementById('gallery-modal');
  const modalImage = document.getElementById('modal-image');
  const closeModal = document.getElementById('close-modal');
  const prevButton = document.getElementById('prev-image');
  const nextButton = document.getElementById('next-image');
  let currentIndex = 0;

  // Use the serialized images for client-side operations
  const images = serializedImages;

  // Open modal
  document.querySelectorAll('[data-index]').forEach(thumbnail => {
    thumbnail.addEventListener('click', () => {
      currentIndex = parseInt(thumbnail.dataset.index || '0');
      updateModalImage();
      modal?.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    });
  });

  // Close modal
  closeModal?.addEventListener('click', () => {
    modal?.classList.add('hidden');
    document.body.style.overflow = 'auto';
  });

  // Close on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      modal?.classList.add('hidden');
      document.body.style.overflow = 'auto';
    }
  });

  // Navigation
  prevButton?.addEventListener('click', () => {
    currentIndex = (currentIndex - 1 + images.length) % images.length;
    updateModalImage();
  });

  nextButton?.addEventListener('click', () => {
    currentIndex = (currentIndex + 1) % images.length;
    updateModalImage();
  });

  // Keyboard navigation
  document.addEventListener('keydown', (e) => {
    if (modal?.classList.contains('hidden')) return;
    
    if (e.key === 'ArrowLeft') {
      currentIndex = (currentIndex - 1 + images.length) % images.length;
    } else if (e.key === 'ArrowRight') {
      currentIndex = (currentIndex + 1) % images.length;
    }
    updateModalImage();
  });

  function updateModalImage() {
    if (modalImage) {
      modalImage.src = images[currentIndex].src;
      modalImage.alt = images[currentIndex].alt;
    }
  }
</script> 